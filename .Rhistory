ggplot(revenue_data, aes(year, revenues, group = New_External_ID)) +
geom_line() +
geom_point()+
ylim(0,10000)
knitr::opts_chunk$set(echo = TRUE)
#load libraries
#if (!requireNamespace("BiocManager", quietly = TRUE))
#install.packages("caret")
#BiocManager::install("preprocessCore")
library(rio)
library(tidyverse)
library(lubridate)
library(janitor)
library(ggplot2)
library(readxl)
library(reshape2)
library(readr)
library(psych)
library(foreign)
library(plm)
library(lme4)
library(lattice)
library(lmerTest)
library(EFAutilities)
library(haven)
library(sjPlot)
library(XLConnect)
library(preprocessCore)
library(knitr)
library(caret)
gali <- import("Data/GALI_External_DataRelease_2020.xlsx")
count(gali,info_venture_country_hq)
#Removing countries with less than 6 ventures.
countries_to_keep <- gali %>%
group_by(gali$info_venture_country_hq) %>%
summarize(Count=n()) %>%
mutate(Percent = round((Count/sum(Count)*100))) %>%
arrange(desc(Count))
#X countries have fewer than 70 firms in the sample. Because so few observations may not offer good representation, I excluded firms headquartered in these countries from the analysis, keeping X firms in Y countries and Z industries.
countries_to_keep <- filter(countries_to_keep, `gali$info_venture_country_hq` != 'NA')
countries_to_keep <- filter(countries_to_keep, Count >6)
countries_to_keep$`gali$info_venture_country_hq`
gali <- gali %>%
filter(info_venture_country_hq  %in% countries_to_keep$`gali$info_venture_country_hq`)
#Number of ventures in main sample
#kable(countries_to_keep)
gali <- filter(gali, found_name1_age > 14 | is.na(found_name1_age))
gali <- filter(gali, found_name2_age > 14 | is.na(found_name2_age))
gali <- filter(gali, found_name3_age > 14 | is.na(found_name3_age))
gali <- filter(gali, found_name1_age < 70 | is.na(found_name1_age))
gali <- filter(gali, found_name2_age < 70 | is.na(found_name2_age))
gali <- filter(gali, found_name3_age < 70 | is.na(found_name3_age))
#Keep only ventures with 3 years of post acceleration information
gali <- filter(gali, fu1report_followup_yes == 1 & fu2report_followup_yes == 1 & fu3report_followup_yes == 1)
#firms that are 5 years or younger when they entered the acceleration program (when data was collected)
if (gali$application_year == 2013) { gali <- filter(gali, info_founding_year > 2007)
}  else if (gali$application_year == 2014) {gali <- filter(gali, info_founding_year > 2008)
} else if (gali$application_year == 2015) {gali <- filter(gali, info_founding_year > 2009)
}  else if (gali$application_year == 2016) {gali <- filter(gali, info_founding_year > 2010)
} else if (gali$application_year == 2017) {gali <- filter(gali, info_founding_year > 2011)
}  else gali <- filter(gali, info_founding_year > 2012)
gali <- gali %>%
rename(country = info_venture_country_hq) %>%
rename(year = program_year)
gali$country[gali$country == "United States of America"] <-"USA"
gali$country[gali$country == "Tanzania, United Republic of"] <-"Tanzania"
countries_to_keep <- gali %>%
group_by(gali$country) %>%
summarize(Count=n()) %>%
mutate(Percent = round((Count/sum(Count)*100))) %>%
arrange(desc(Count))
countries_to_keep <- filter(countries_to_keep, `gali$country` != 'NA')
countries_to_keep <- filter(countries_to_keep, Count >6)
countries_to_keep$`gali$country`
gali <- gali %>%
filter(country  %in% countries_to_keep$`gali$country`)
#Number of ventures in main sample
#kable(countries_to_keep)
gem_nes <- import("Data/GEM-NES.csv")
#Clean and tidy gem NES
gem_nes <- clean_names(gem_nes)
gem_nes <- gem_nes %>%
row_to_names(row_number = 2)
gem_nes[,-2] <- gem_nes[,-2] %>% mutate_if(is.character,as.numeric)
gem_nes$inst_hc_nes <- rowMeans(gem_nes[,(5:6)])
gem_nes <- clean_names(gem_nes)
gem_nes <- gem_nes %>%
rename(country = economy) %>%
rename(inst_fc_gem = 	financing_for_entrepreneurs)
gem_nes <- gem_nes [, -(5:6)]
#Normalize NES data (all data is based on a scale from 1 to 5)
preproc_nes <- preProcess(gem_nes[,(4:5)], method=c("range"))
gem_nes <- predict(preproc_nes, gem_nes)
gem_aps <- import("Data/GEM-APS.csv")
#Clean and tidy gem APS
gem_aps <- clean_names(gem_aps)
gem_aps <- gem_aps %>%
row_to_names(row_number = 2)
gem_aps[,-2] <- gem_aps[,-2] %>% mutate_if(is.character,as.numeric)
gem_aps <- clean_names(gem_aps)
gem_aps <- gem_aps %>%
rename(country = economy) %>%
rename(inst_signaling_aps = high_status_to_successful_entrepreneurs)%>%
rename(inst_hc_aps = established_business_ownership) %>%
rename(inst_sc_aps = total_early_stage_entrepreneurial_activity_tea)
#All APS data is a percentage. We devide by 100 to gat [0,1] range
gem_aps$inst_signaling_gem <- gem_aps$inst_signaling_aps /100
gem_aps$inst_hc_aps <- gem_aps$inst_hc_aps /100
gem_aps$inst_sc_gem <- gem_aps$inst_sc_aps /100
#join nes and aps on country and year
gem <- left_join(gem_nes, gem_aps, by=c("country", "year", "code"))
gem$inst_hc_gem <- rowMeans(gem[,c("inst_hc_nes", "inst_hc_aps")])
gem <- gem %>%
select(code, country, year, ends_with('_gem'))
gem$country[gem$country == "United States"] <-"USA"
gem <- gem %>%
group_by(country) %>%
mutate(inst_fc_gem = mean(inst_fc_gem, na.rm= TRUE),
inst_hc_gem = mean(inst_hc_gem, na.rm= TRUE),
inst_sc_gem = mean(inst_sc_gem, na.rm= TRUE),
inst_signaling_gem = mean(inst_signaling_gem, na.rm= TRUE))
gem <- select(gem, -year)
gem <- gem %>% distinct()
gci <- import("Data/GCI_2018.xlsx")
gci <- filter(gci, `Series Global ID` == "EOSQ089" |
`Series Global ID` == "EOSQ425" )
gci <- filter(gci, Edition ==2018 )
gci <- filter(gci, Attribute == "VALUE")
gci <- select(gci, -c("Index", "Edition", "Freeze date", "Series units", "Series order", "Series code (if applicable)", "Attribute", "Series name"))
gci <- gci %>%
gather(country, score, -`Series Global ID`)
gci$country[gci$country == "United States"] <-"USA"
gci <- gci %>%
filter(country  %in% countries_to_keep$`gali$country`)
gci$score <- round(as.numeric(gci$score),2)
gci <- clean_names(gci)
gci <- gci %>%
pivot_wider(names_from = series_global_id,
values_from = score)
preproc_gci <- preProcess(gci %>%
select(starts_with("EOSQ"))
, method=c("range"))
gci <- predict(preproc_gci, gci)
gci$inst_fc_gci <- rowMeans(gci[,c('EOSQ425','EOSQ089')], na.rm = TRUE)
gci <- select(gci, !starts_with('EOSQ'))
#Rank 1 shows the most important benefit (highest attention)
#After normalizing, I will substract 1 and take absolute value to make sure higher value in range 0 to 1 goes to higher attention. This is to ensure that country and ventures variables move on the same directions, in order to construct a congurance level.
#Normalize Attention data (all data is based on a scale from 1 to 7)
preproc_gali <- preProcess(gali %>%
select(starts_with("accel_ben_rank_"))
, method=c("range"))
gali <- predict(preproc_gali, gali)
#Calculating the average of different benifits to group them into one of the 3 categories of capital plus signaling.
gali$attention_hc <- 1- round((rowMeans(gali[,
c('accel_ben_rank_business_skills',
'accel_ben_rank_mentorship')],
na.rm=TRUE)),2)
gali$attention_signaling <- 1- round((gali$accel_ben_rank_aware_cred),2)
gali$attention_sc <- 1- round((rowMeans(gali[,
c('accel_ben_rank_network',
'accel_ben_rank_access_entreprene')],
na.rm=TRUE)),2)
gali$attention_fc <- 1- round((rowMeans(gali[,
c('accel_ben_rank_access_investors',
'accel_ben_rank_direct_funding')],
na.rm=TRUE)),2)
#I will then mutiply this by the country index to measure the congruence level
gali_joined <- left_join(gali, gem, by = "country")
gali_joined <- left_join(gali_joined, gci, by = "country")
#Checking if the two methods of measring institutional fc are correlated. We want them to be highly correlated
cor(gali_joined$inst_fc_gem, gali_joined$inst_fc_gci, use="complete.obs")
View(gali_joined)
gali_joined %>% mutate(count = gali_joined %>% select(starts_with("inv_") & ends_with("_m1")) %>%
rowSums())
gali_joined_test  <- gali_joined %>% mutate(count = gali_joined %>% select(starts_with("inv_") & ends_with("_m1")) %>%
rowSums())
View(gali_joined_test)
gali_joined  <- gali_joined %>% mutate(capital_raised0 = gali_joined %>% select(starts_with("inv_") & ends_with("_m1")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_raised1 = gali_joined %>% select(starts_with("fu1inv_") & ends_with("_m1")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_raised4 = gali_joined %>% select(starts_with("fu4inv_") & ends_with("_m1")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_raised3 = gali_joined %>% select(starts_with("fu3inv_") & ends_with("_m1")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_raised2 = gali_joined %>% select(starts_with("fu2inv_") & ends_with("_m1")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_raised1 = gali_joined %>% select(starts_with("fu1inv_") & ends_with("_m1")) %>%
rowSums())
View(gali_joined)
gali_joined  <- gali_joined %>% mutate(capital_aspired0 = gali_joined %>% select(starts_with("inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired1 = gali_joined %>% select(starts_with("fu1inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired2 = gali_joined %>% select(starts_with("fu2inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired3 = gali_joined %>% select(starts_with("fu3inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired4 = gali_joined %>% select(starts_with("fu4inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_raised_tot = gali_joined %>% select(starts_with("capital_raised")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired0 = gali_joined %>% select(starts_with("inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired1 = gali_joined %>% select(starts_with("fu1inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired2 = gali_joined %>% select(starts_with("fu2inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired3 = gali_joined %>% select(starts_with("fu3inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired4 = gali_joined %>% select(starts_with("fu4inv_plans") & ends_with("_12motnhs")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_aspired_tot = gali_joined %>% select(starts_with("capital_aspired")) %>%
rowSums())
gali_joined  <- gali_joined %>% mutate(capital_raised0 = gali_joined %>% select(starts_with("inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_aspired0 = gali_joined %>% select(starts_with("inv_plans") & ends_with("_12motnhs")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_aspired1 = gali_joined %>% select(starts_with("fu1inv_plans") & ends_with("_12motnhs")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_aspired2 = gali_joined %>% select(starts_with("fu2inv_plans") & ends_with("_12motnhs")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_aspired3 = gali_joined %>% select(starts_with("fu3inv_plans") & ends_with("_12motnhs")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_aspired4 = gali_joined %>% select(starts_with("fu4inv_plans") & ends_with("_12motnhs")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_aspired_tot = gali_joined %>% select(starts_with("capital_aspired")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised0 = gali_joined %>% select(starts_with("inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised1 = gali_joined %>% select(starts_with("fu1inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised2 = gali_joined %>% select(starts_with("fu2inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised3 = gali_joined %>% select(starts_with("fu3inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised4 = gali_joined %>% select(starts_with("fu4inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised_tot = gali_joined %>% select(starts_with("capital_raised")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(hr_tot = gali_joined %>%
select(contains("_employees")) %>%
rowSums(na.rm = TRUE))
gali_joined <- gali_joined %>% mutate(equity_sources_tot = gali_joined %>%
select(contains("equityfrom")) %>%
rowSums(na.rm = TRUE))
gali_joined <- gali_joined %>% mutate(revenue_tot = gali_joined %>%
select(contains("revenues")) %>%
rowSums(na.rm = TRUE))
ggplot(gali_joined, aes(attention_fc*inst_fc_gci, capital_raised_tot)) +
geom_point()
ggplot(gali_joined, aes(attention_fc*inst_fc_gci, capital_raised_tot)) +
geom_point()+
ylim(0,100000)
ggplot(gali_joined, aes(attention_fc*inst_fc_gci, capital_raised_tot)) +
geom_point()+
ylim(0,1000000)
ggplot(gali_joined, aes(attention_fc*inst_fc_gci, capital_raised_tot)) +
geom_point()+
ylim(0,1000)
ggplot(gali_joined, aes(attention_fc*inst_fc_gci, capital_raised_tot)) +
geom_point()+
ylim(0,1000000)
ggplot(gali_joined, aes(attention_fc*inst_fc_gem, capital_raised_tot)) +
geom_point()+
ylim(0,1000000)
ggplot(gali_joined, aes(attention_hc*inst_hc_gem, hr_tot)) +
geom_point()
ggplot(gali_joined, aes(attention_hc*inst_hc_gem, hr_tot)) +
geom_point()+
ylim(0,10000)
ggplot(gali_joined, aes(attention_hc*inst_hc_gem, hr_tot)) +
geom_point()+
ylim(0,1000)
ggplot(gali_joined, aes(attention_hc*inst_hc_gem, hr_tot)) +
geom_point()+
ylim(0,200)
gali <- import("Data/GALI_External_DataRelease_2020.xlsx")
count(gali,info_venture_country_hq)
#Removing countries with less than 6 ventures.
countries_to_keep <- gali %>%
group_by(gali$info_venture_country_hq) %>%
summarize(Count=n()) %>%
mutate(Percent = round((Count/sum(Count)*100))) %>%
arrange(desc(Count))
#X countries have fewer than 70 firms in the sample. Because so few observations may not offer good representation, I excluded firms headquartered in these countries from the analysis, keeping X firms in Y countries and Z industries.
countries_to_keep <- filter(countries_to_keep, `gali$info_venture_country_hq` != 'NA')
countries_to_keep <- filter(countries_to_keep, Count >6)
countries_to_keep$`gali$info_venture_country_hq`
gali <- gali %>%
filter(info_venture_country_hq  %in% countries_to_keep$`gali$info_venture_country_hq`)
#Number of ventures in main sample
#kable(countries_to_keep)
gali <- filter(gali, found_name1_age > 14 | is.na(found_name1_age))
gali <- filter(gali, found_name2_age > 14 | is.na(found_name2_age))
gali <- filter(gali, found_name3_age > 14 | is.na(found_name3_age))
gali <- filter(gali, found_name1_age < 70 | is.na(found_name1_age))
gali <- filter(gali, found_name2_age < 70 | is.na(found_name2_age))
gali <- filter(gali, found_name3_age < 70 | is.na(found_name3_age))
#Keep only ventures with 3 years of post acceleration information
gali <- filter(gali, fu1report_followup_yes == 1 & fu2report_followup_yes == 1 & fu3report_followup_yes == 1)
#firms that are 5 years or younger when they entered the acceleration program (when data was collected)
if (gali$application_year == 2013) { gali <- filter(gali, info_founding_year > 2007)
}  else if (gali$application_year == 2014) {gali <- filter(gali, info_founding_year > 2008)
} else if (gali$application_year == 2015) {gali <- filter(gali, info_founding_year > 2009)
}  else if (gali$application_year == 2016) {gali <- filter(gali, info_founding_year > 2010)
} else if (gali$application_year == 2017) {gali <- filter(gali, info_founding_year > 2011)
}  else gali <- filter(gali, info_founding_year > 2012)
gali <- gali %>%
rename(country = info_venture_country_hq) %>%
rename(year = program_year)
gali$country[gali$country == "United States of America"] <-"USA"
gali$country[gali$country == "Tanzania, United Republic of"] <-"Tanzania"
countries_to_keep <- gali %>%
group_by(gali$country) %>%
summarize(Count=n()) %>%
mutate(Percent = round((Count/sum(Count)*100))) %>%
arrange(desc(Count))
countries_to_keep <- filter(countries_to_keep, `gali$country` != 'NA')
countries_to_keep <- filter(countries_to_keep, Count >6)
countries_to_keep$`gali$country`
gali <- gali %>%
filter(country  %in% countries_to_keep$`gali$country`)
#Number of ventures in main sample
#kable(countries_to_keep)
gem_nes <- import("Data/GEM-NES.csv")
#Clean and tidy gem NES
gem_nes <- clean_names(gem_nes)
gem_nes <- gem_nes %>%
row_to_names(row_number = 2)
gem_nes[,-2] <- gem_nes[,-2] %>% mutate_if(is.character,as.numeric)
gem_nes$inst_hc_nes <- rowMeans(gem_nes[,(5:6)])
gem_nes <- clean_names(gem_nes)
gem_nes <- gem_nes %>%
rename(country = economy) %>%
rename(inst_fc_gem = 	financing_for_entrepreneurs)
gem_nes <- gem_nes [, -(5:6)]
#Normalize NES data (all data is based on a scale from 1 to 5)
preproc_nes <- preProcess(gem_nes[,(4:5)], method=c("range"))
gem_nes <- predict(preproc_nes, gem_nes)
gem_aps <- import("Data/GEM-APS.csv")
#Clean and tidy gem APS
gem_aps <- clean_names(gem_aps)
gem_aps <- gem_aps %>%
row_to_names(row_number = 2)
gem_aps[,-2] <- gem_aps[,-2] %>% mutate_if(is.character,as.numeric)
gem_aps <- clean_names(gem_aps)
gem_aps <- gem_aps %>%
rename(country = economy) %>%
rename(inst_signaling_aps = high_status_to_successful_entrepreneurs)%>%
rename(inst_hc_aps = established_business_ownership) %>%
rename(inst_sc_aps = total_early_stage_entrepreneurial_activity_tea)
#All APS data is a percentage. We devide by 100 to gat [0,1] range
gem_aps$inst_signaling_gem <- gem_aps$inst_signaling_aps /100
gem_aps$inst_hc_aps <- gem_aps$inst_hc_aps /100
gem_aps$inst_sc_gem <- gem_aps$inst_sc_aps /100
#join nes and aps on country and year
gem <- left_join(gem_nes, gem_aps, by=c("country", "year", "code"))
gem$inst_hc_gem <- rowMeans(gem[,c("inst_hc_nes", "inst_hc_aps")])
gem <- gem %>%
select(code, country, year, ends_with('_gem'))
gem$country[gem$country == "United States"] <-"USA"
gem <- gem %>%
group_by(country) %>%
mutate(inst_fc_gem = mean(inst_fc_gem, na.rm= TRUE),
inst_hc_gem = mean(inst_hc_gem, na.rm= TRUE),
inst_sc_gem = mean(inst_sc_gem, na.rm= TRUE),
inst_signaling_gem = mean(inst_signaling_gem, na.rm= TRUE))
gem <- select(gem, -year)
gem <- gem %>% distinct()
gci <- import("Data/GCI_2018.xlsx")
gci <- filter(gci, `Series Global ID` == "EOSQ089" |
`Series Global ID` == "EOSQ425" )
gci <- filter(gci, Edition ==2018 )
gci <- filter(gci, Attribute == "VALUE")
gci <- select(gci, -c("Index", "Edition", "Freeze date", "Series units", "Series order", "Series code (if applicable)", "Attribute", "Series name"))
gci <- gci %>%
gather(country, score, -`Series Global ID`)
gci$country[gci$country == "United States"] <-"USA"
gci <- gci %>%
filter(country  %in% countries_to_keep$`gali$country`)
gci$score <- round(as.numeric(gci$score),2)
gci <- clean_names(gci)
gci <- gci %>%
pivot_wider(names_from = series_global_id,
values_from = score)
preproc_gci <- preProcess(gci %>%
select(starts_with("EOSQ"))
, method=c("range"))
gci <- predict(preproc_gci, gci)
gci$inst_fc_gci <- rowMeans(gci[,c('EOSQ425','EOSQ089')], na.rm = TRUE)
gci <- select(gci, !starts_with('EOSQ'))
#Removing ventures that ranked benefits outside of given scale (i.e. 1 to 7)
gali <- filter(gali, accel_ben_rank_network <= 7 & accel_ben_rank_business_skills
<= 7 & accel_ben_rank_mentorship <= 7 & accel_ben_rank_access_investors <= 7 & accel_ben_rank_direct_funding <= 7 & accel_ben_rank_access_entreprene <= 7 & accel_ben_rank_aware_cred <= 7 )
#Removing ventures that gave the same ranking to two or more benefits
gali <- filter(gali,
accel_ben_rank_network != accel_ben_rank_business_skills &
accel_ben_rank_network != accel_ben_rank_mentorship &
accel_ben_rank_network != accel_ben_rank_access_investors &
accel_ben_rank_network != accel_ben_rank_direct_funding &
accel_ben_rank_network != accel_ben_rank_access_entreprene &
accel_ben_rank_network != accel_ben_rank_aware_cred )
gali <- filter(gali,
accel_ben_rank_business_skills != accel_ben_rank_mentorship &
accel_ben_rank_business_skills != accel_ben_rank_access_investors &
accel_ben_rank_business_skills != accel_ben_rank_direct_funding &
accel_ben_rank_business_skills != accel_ben_rank_access_entreprene &
accel_ben_rank_business_skills != accel_ben_rank_aware_cred )
gali <- filter(gali,
accel_ben_rank_mentorship != accel_ben_rank_access_investors &
accel_ben_rank_mentorship != accel_ben_rank_direct_funding &
accel_ben_rank_mentorship != accel_ben_rank_access_entreprene &
accel_ben_rank_mentorship != accel_ben_rank_aware_cred )
gali <- filter(gali,
accel_ben_rank_access_investors != accel_ben_rank_direct_funding &
accel_ben_rank_access_investors != accel_ben_rank_access_entreprene &
accel_ben_rank_access_investors != accel_ben_rank_aware_cred )
gali <- filter(gali,
accel_ben_rank_direct_funding != accel_ben_rank_access_entreprene &
accel_ben_rank_direct_funding != accel_ben_rank_aware_cred )
gali <- filter(gali,
accel_ben_rank_access_entreprene != accel_ben_rank_aware_cred )
#Rank 1 shows the most important benefit (highest attention)
#After normalizing, I will substract 1 and take absolute value to make sure higher value in range 0 to 1 goes to higher attention. This is to ensure that country and ventures variables move on the same directions, in order to construct a congurance level.
#Normalize Attention data (all data is based on a scale from 1 to 7)
preproc_gali <- preProcess(gali %>%
select(starts_with("accel_ben_rank_"))
, method=c("range"))
gali <- predict(preproc_gali, gali)
#Calculating the average of different benifits to group them into one of the 3 categories of capital plus signaling.
gali$attention_hc <- 1- round((rowMeans(gali[,
c('accel_ben_rank_business_skills',
'accel_ben_rank_mentorship')],
na.rm=TRUE)),2)
gali$attention_signaling <- 1- round((gali$accel_ben_rank_aware_cred),2)
gali$attention_sc <- 1- round((rowMeans(gali[,
c('accel_ben_rank_network',
'accel_ben_rank_access_entreprene')],
na.rm=TRUE)),2)
gali$attention_fc <- 1- round((rowMeans(gali[,
c('accel_ben_rank_access_investors',
'accel_ben_rank_direct_funding')],
na.rm=TRUE)),2)
#I will then mutiply this by the country index to measure the congruence level
gali_joined <- left_join(gali, gem, by = "country")
gali_joined <- left_join(gali_joined, gci, by = "country")
#Checking if the two methods of measring institutional fc are correlated. We want them to be highly correlated
cor(gali_joined$inst_fc_gem, gali_joined$inst_fc_gci, use="complete.obs")
gali_joined  <- gali_joined %>% mutate(capital_raised0 = gali_joined %>% select(starts_with("inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised1 = gali_joined %>% select(starts_with("fu1inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised2 = gali_joined %>% select(starts_with("fu2inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised3 = gali_joined %>% select(starts_with("fu3inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised4 = gali_joined %>% select(starts_with("fu4inv_") & ends_with("_m1")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(capital_raised_tot = gali_joined %>% select(starts_with("capital_raised")) %>%
rowSums(na.rm = TRUE))
gali_joined  <- gali_joined %>% mutate(hr_tot = gali_joined %>%
select(contains("_employees")) %>%
rowSums(na.rm = TRUE))
gali_joined <- gali_joined %>% mutate(equity_sources_tot = gali_joined %>%
select(contains("equityfrom")) %>%
rowSums(na.rm = TRUE))
gali_joined <- gali_joined %>% mutate(revenue_tot = gali_joined %>%
select(contains("revenues")) %>%
rowSums(na.rm = TRUE))
ggplot(gali_joined, aes(attention_hc*inst_hc_gem, hr_tot)) +
geom_point()+
ylim(0,200)
ggplot(gali_joined, aes(attention_hc*inst_hc_gem, hr_tot)) +
geom_point()+
ylim(0,50)
ggplot(gali_joined, aes(attention_hc+inst_hc_gem, hr_tot)) +
geom_point()+
ylim(0,50)
ggplot(gali_joined, aes(attention_sc+inst_sc_gem, equity_sources_tot)) +
geom_point()
ggplot(gali_joined, aes(attention_sc+inst_sc_gem, equity_sources_tot)) +
geom_point()+
ylim(0.10)
ggplot(gali_joined, aes(attention_sc+inst_sc_gem, equity_sources_tot)) +
geom_point()+
ylim(0,10)
ggplot(gali_joined, aes((attention_sc+1)*(1+inst_sc_gem), equity_sources_tot)) +
geom_point()+
ylim(0,10)
ggplot(gali_joined, aes((attention_fc+1)*(1+inst_fc_gem), capital_raised_tot)) +
geom_point()+
ylim(0,10)
ggplot(gali_joined, aes((attention_fc+1)*(1+inst_fc_gem), capital_raised_tot)) +
geom_point()+
ylim(0,10000)
ggplot(gali_joined, aes((attention_fc+1)*inst_fc_gem, capital_raised_tot)) +
geom_point()+
ylim(0,10000)
ggplot(gali_joined, aes((attention_fc+1)*(1+inst_fc_gci), capital_raised_tot)) +
geom_point()+
ylim(0,10000)
ggplot(gali_joined, aes((attention_fc+1)*(1+inst_fc_gci), hr_tot)) +
geom_point()+
ylim(0,10000)
ggplot(gali_joined, aes((attention_fc+1)*(1+inst_fc_gci), hr_tot)) +
geom_point()+
ylim(0,10)
ggplot(gali_joined, aes(attention_fc,inst_fc_gci)) +
geom_point()
ggplot(gali_joined, aes(inst_hc_gem,inst_fc_gem)) +
geom_point()
